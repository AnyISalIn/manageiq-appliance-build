# Create a script to initialize appliance on first boot
cat > /bin/appliance-initialize.sh <<EOF
#!/bin/sh
[[ -d /var/opt/rh/rh-postgresql94/lib/pgsql/data/base ]] && exit 0
[[ -s /etc/default/evm ]] && source /etc/default/evm
echo "Initializing Appliance, please wait ..." > /dev/tty1
appliance_console_cli --region 0 --internal --password smartvm
EOF
chmod 755 /bin/appliance-initialize.sh

# Create a systemd service to run it on first boot
cat > /usr/lib/systemd/system/appliance-initialize.service <<EOF
[Unit]
Description=Initialize Appliance Database
ConditionPathExists=!/var/opt/rh/rh-postgresql94/lib/pgsql/data/base
After=evminit.service memcached.service
Before=evmserverd.service
Requires=memcached.service
[Service]
Type=oneshot
ExecStart=/bin/appliance-initialize.sh
ExecStartPost=/usr/bin/systemctl disable appliance-initialize
[Install]
WantedBy=multi-user.target
EOF

# Finally, enable the service
systemctl enable appliance-initialize


# Rails API Started
cat > /bin/vaneq_rails_api.sh <<EOF
#!/bin/bash
[[ -d /opt/manageiq/vaneq_rails_api ]] || exit 1
source /etc/default/evm && BUNDLE_GEMFILE=''
cd /opt/manageiq/vaneq_rails_api && nohup rails s -b 0.0.0.0 -p 6001 &>> /var/www/miq/vmdb/log/vaneq_api.log &
EOF

chmod 755 /bin/vaneq_rails_api.sh

# Create a systemd service to run it on first boot
cat > /usr/lib/systemd/system/vaneq_rails_api.service <<EOF
[Unit]
Description=Start VaneQ Rails API
ConditionPathExists=/opt/manageiq/vaneq_rails_api
Before=evmserverd.service
Requires=evmserverd.service
[Service]
Type=forking
ExecStart=/bin/vaneq_rails_api.sh
ExecStop=/bin/sh -c "fuser -k 6001/tcp"
[Install]
WantedBy=multi-user.target
EOF
